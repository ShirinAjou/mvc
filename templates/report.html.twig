{% extends "base.html.twig" %}

{% block title %}About{% endblock %}

{% block main %}
<div class="report-div">
    <aside class="aside-report">
        <ul>
            <li><a href="#kmom01">Kmom01</a></li>
            <li><a href="#kmom02">Kmom02</a></li>
            <li><a href="#kmom03">Kmom03</a></li>
            <li><a href="#kmom04">Kmom04</a></li>
            <li><a href="#kmom05">Kmom05</a></li>
            <li><a href="#kmom06">Kmom06</a></li>
            <li><a href="#kmom07">Kmom07</a></li>
            <li><a href="#kmom10">Kmom10</a></li>
        </ul>
    </aside>

    <div class="sections-container">
        <section id="kmom01">
            <h2>Kmom01</h2>
            <ul>
                <li>Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering.</li>
                <li>Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder man behöver veta/förstå för att kunna komma igång och skapa sina första klasser?</li>
                <li>Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den?</li>
                <li>Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner du extra intressanta och värdefulla? 
                Är det några särskilda områden som du känner att du vill veta mer om? 
                Lyft fram några delar av artikeln som du känner mer värdefulla.</li>
                <li>Vilken är din TIL för detta kmom?</li>
            </ul>

            <p>Den tidigare erfarenhet jag har av objektorientering är från python kursen och jag upplever att än så länge är de rätt lika.</p>
            
            <p>I objektorientering finns objekt, kopplade till sig finns atribut och metoder. Attributen sparar värden för objektet i ett visst läge. 
            Vill man att objektet ska utföra något/ändras så används metoder för. Det objektets API. Ett objekt skapas utifrån en klass och en klass fungerar som en mall. 
            Ett objekt är en instans av en klass och definiera neras genom att skriva ut class framför klassnamnet.</p>

            <p>Mycket är likt det som jag gjort i tidigare kurser, så som mappindelningar och vilka filer som ska vara vilken mapp. Hur metoderna, klaser och router fungerar men det finns fortfarande delar som jag inte förstår hur de funkar, deras syfte och så vidare. 
            Många gånger vet jag vilka delar som behövs och vart de ska vara för att funka men inte mer än så och det kan vara frustrerande att sakna den typen av kunskap.</p>

            <p>I “PHP The Right Way” är templating och Errors and Exceptions intressesanta då det är sådan som är värdefullt för det som vi håller på med just nu och kan bidra till lärandet och kodandet i kommande uppgifter.</p>
            
            <p>TIL för detta kmom är objekt och klasser och hur dessa fungerar.</p>
        </section>

        <section id="kmom02">
            <h2>Kmom02</h2>
            <ul>
                <li>Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.</li>
                <li>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?</li>
                <li>Vilka är dina reflektioner så här långt med att jobb i Symfony med applikationskod enligt MVC?</li>
                <li>Vilken är din TIL för detta kmom?</li>
            </ul>

            <p>Inom objektorientering innebär arv att en klass ärver från en annan klass. 
            Klassen som ärver ärver även egenskaperna från klassen. 
            Basklassen kallas även superklass och den ärvande klassen kallas subklass. 
            Komposition innebär en stark has-a relation mellan två objekt, där det ena objektet är helt beroende av det andra för att existera.
            Trait är lik arv men är en annan typ av konstruktion.
            Trait består av metoder och medlemsvariabler som används för att utöka funktionaliteten av en klass.
            Ett interface är ett kontrakt som definierar vilka metoder en klass måste erbjuda, utan att innehålla någon konkret implementation.</p>

            <p>Jag valde att ha fyra klasser, Card, Cardhand, DeckOfCards och CardGraphic.
            Jag använder mig av både kompision och arv. CardGraphic utökar Card-klassen. CardHand har en instans av DeckOfCards.
            Card hanterar ett kort, DeckOfCards haterar hela kortleken, CardGraphic hanterar det visuella och CardHand är spelarens hand.
            Jag tycker att denna uppdelning gör koden tydlig och strukturerad, varje klass har sin särskilda uppgift.
            Genom att separera ansvar i olika klasser blir det lättare att följa och underhålla varje del för sig.
            Det är också möjligt att utöka funktionaliteten i framtiden, till exempel genom att lägga/återanvända till kortspelsregler och funktionaliteter.</p>

            <p>Symfony är kul än så länge, struktureringen MVC är något vi hållit på med i andra kurser så det är något man känner igen.
            Det gör att det blir enklare att jobba med det eftersom det är bekant. 
            Strukturen gör det dessutom enkelt att förstå och orientera sig i bland alla mappar och filer.</p>

            <p>TIL för detta kmom är kompisition och arv, hur dessa fungerar.</p>
        </section>

        <section id="kmom03">
            <h2>Kmom03</h2>
            <ul>
                <li>Berätta hur det kändes att modellera ett kortspel med flödesdiagram och psuedokod. Var det något som du tror stödjer dig i din problemlösning och tankearbete för att strukturera koden kring en applikation?</li>
                <li>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden, dina klasser och applikationen som helhet?</li>
                <li>Vilken är din känsla för att koda i ett ramverk som Symfony, så här långt in i kursen?</li>
                <li>Vilken är din TIL för detta kmom?</li>
            </ul>

            <p>Jag började koda innan jag gjorde flödesdiagram och psuedokod.
            Dels för att jag såg den lite senare då den låg efter kraven och jag hann börja direkt med de samt för att jag brukar vilja börja koda för att bygga ett skelett och förstå vilka klasser och dylikt jag ska använda.
            Börjar jag med diagram blir jag även lätt färst vid den och fyrkantig så om jag behöver tänka om eller ändra mig kan jag lätt låsa mig vid att diagramet ska följas till vilket pris som helst.
            Psuedokoden gick ändå bra och dte var inte för svårt tack vare exmepel och tidigare erfarenhet men flödesdiagramet var däremot svårt, trots att jag gjort dte tidigare.
            Det var svårt att få till hur jag skulle illustrera den, i mitt huvud var det självklart för jag visste hur jag byggt mitt spel och varför jag gjort som jag gjort men det blev mcyket svårare att visualisera flödet.</p>

            <p>Jag började med att skapa laddningssidan och därefter kom varje steg naturligt.
            Skapa startknappen dra kort, stoppa spelet, om det var över 21 så avslutas spelet annars kan spelaren välja att avsluta närsom och då drar banken sin och resultatet presenteras.
            Jag är överlag nöjd den gör det den ska och dne uppfyller kraven.
            förbättringspotentialen är såklart oändliga.
            Jag hade bland annat velat göra den visuelt snyggare med kort och annan styling.
            Tanken med klasserna var egentligen först att skapa en klass för spelaren och en för banken och en för att starta spelet.
            Ju mer jag kodade desto mer flytande blev det och jag valde att göra om och gjorde en för att välja vems tur, när man ska dra kort och en för olika metoder som berör spelet generellt.
            Vart det bra uppdelat? Nej det kan jag inte påstå, det är virritg och otydligt och inga tydliga gränser och uppgifter för varje enskild klass.
            Spelet funkar och jag är trött i både kropp och själ så då får det duga!</p>

            <p>Jo det är väl som innan skulle jag säga. inte mycket har förändrats i mina känslor för Symfony.</p>
            
            <p>TIL för detta kmom är väl flödesdiagram. 
            Dels att får göra det igen och öva men också hur vikitigt det är att få ner det i ett diagram det som finns i huvudet.
            Vidare att när jag har det i huvudet känner jag att det är bra att få ner det så jag kan följa den och på så sätt öva på att programera på ett annat sätt som jag tror är värdefullt för mig.
            Jag kodar fritt och löser problem allteftersom men jag tror jag behöver tänka och sen koda lite mer.</p>
        </section>

        <section id="kmom04">
            <h2>Kmom04</h2>
        </section>

        <section id="kmom05">
            <h2>Kmom05</h2>
            
        </section>

        <section id="kmom06">
            <h2>Kmom06</h2>
        </section>

        <section id="kmom07">
            <h2>Kmom07</h2>
        </section>
    </div>
</div>
{% endblock %}